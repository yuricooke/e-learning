let contQuestions;

function questionsBuilder(e, t) {
    let n = [];
    if ("undefined" != typeof exercises)
        for (let n in exercises) {
            let i = e.querySelector("#" + n);
            if (null !== i) {
                let o = i.getAttribute("id"),
                    s = [];
                exercises[n].questions.forEach((n, d) => {
                    i.appendChild(questionBuilder(n, d, o, e, configBtnExerciseBuilder, t)), s.push(n)
                }), printVersion && buildQuestionPrintVersion(s, o, i)
            }
        }
    return e.querySelectorAll(".question").forEach(i => {
        let o = i.getAttribute("id"),
            s = [];
        questions[o] && (prepareUnlockCondition(o), questions[o].questions.forEach((d, a) => {
            i.appendChild(questionBuilder(d, a, o, e, configBtnDefaultBuilder, t, n)), s.push(d)
        })), printVersion && buildQuestionPrintVersion(s, o, i)
    }), e.querySelectorAll(".practice-test").forEach(n => {
        let i = n.getAttribute("id"),
            o = [];
        questions[i] && (questions[i].questions.forEach((s, d) => {
            n.appendChild(questionBuilder(s, d, i, e, configBtnPracticeTestBuilder, t)), o.push(s)
        }), practiceTestButtonBuilder(n, i)), printVersion && buildQuestionPrintVersion(o, i, n)
    }), n
}

function buildQuestionPrintVersion(e, t, n) {
    let i = document.createElement("div");
    i.classList.add("container-all-answers");
    let o = document.createElement("span");
    o.classList.add("span-title-all-answers"), element = void 0 !== questions[t] ? questions : void 0 !== exercises[t] ? exercises : null, o.innerHTML = element && void 0 !== element[t].printTitle ? element[t].printTitle : "Gabarito", e.forEach(e => {
        i.appendChild(createCorrectAnswerStructure(e, defaultQuestionData, t, element[t].questions.findIndex(t => t.title === e.title)))
    }), n.appendChild(o), n.appendChild(i)
}

function createCorrectAnswerStructure(e, t, n, i) {
    let o = document.createElement("div");
    o.classList.add("container-print-answer");
    let s = document.createElement("p");
    s.innerHTML = e.title;
    let d, a = [];
    e.answers.forEach((e, t) => {
        if (e.correct) {
            let e = document.querySelector(`#questions-${n}-question-${i}-option${t}`);
            a.push(getLetter(e))
        }
    }), "undefined" != typeof defaultPrintData ? d = e.positiveFeedback.text.replace(/(\{\{defaultText\}\})/gim, defaultPrintData) : void 0 !== t && (d = e.positiveFeedback.text.replace(/(\{\{defaultText\}\})/gim, t.positiveFeedback)), d = d.replace(/(\{\{correta\}\})/gim, a);
    let r = document.createElement("p");
    return r.innerHTML = d, o.appendChild(s), o.appendChild(r), o
}

function prepareUnlockCondition(e) {
    if (questions[e].unlockCondition)
        if (isNaN(questions[e].unlockCondition)) {
            let t = [];
            questions[e].unlockCondition.forEach((n, i) => {
                0 === questions[e].questions.filter(e => e.questionId === n).length && t.push(i)
            }), t.forEach(t => {
                questions[e].unlockCondition.splice(t, 1)
            }), questions[e].unlockCondition.length > 0 ? questions[e].hitQuestions = [] : delete questions[e].unlockCondition
        } else questions[e].unlockCondition <= questions[e].questions.length ? questions[e].hitQuestions = 0 : delete questions[e].unlockCondition
}

function questionBuilder(e, t, n, i, o, s, d) {
    let a = document.createElement("div");
    a.classList.add("question-main-container"), a.setAttribute("id", `questions-${n}-question-${t}-main-container`);
    let r = document.createElement("form");
    r.classList.add("form");
    let c = document.createElement("h3"),
        u = document.createElement("span");
    u.innerHTML = e.title;
    let l = document.createElement("div");
    l.classList.add("alternatives"), e.answers && alternativesBuilder(e, t, l, n), e.buttonName || (e.buttonName = "Responder");
    let p = document.createElement("div");
    p.classList.add("container-buttons-question-feedback");
    let b = document.createElement("button");
    return b.classList.add("btn", "text-dark", "mdc-bg-yellow-700", "question-feedback-btn"), b.setAttribute("id", `feedback-button-questions-${n}-question-${t}`), b.setAttribute("type", "button"), b.appendChild(document.createTextNode(e.buttonName)), o(b, a, e, n, t, p, i, s), c.appendChild(u), r.appendChild(c), r.appendChild(l), p.appendChild(b), r.appendChild(p), a.appendChild(r), feedbackBuilder(t, a, n, e, b), d && e.recovered && d.push(b), a
}

function alternativesBuilder(e, t, n, i) {
    let o = null;
    "undefined" != typeof storage && void 0 !== storage.answers && storage.answers.length > 0 && (o = storage.answers.find(t => t.questionId === e.uuid));
    let s = e.answers.filter(e => e.correct).length > 1 ? "checkbox" : "radio";
    e.totalCorrectsAnswers = 0, e.answers.forEach((d, a) => {
        let r = document.createElement("div");
        r.classList.add("inputGroup");
        let c = document.createElement("input");
        if (c.setAttribute("type", s), c.setAttribute("name", `questions-${i}-question-${t}`), c.setAttribute("id", `questions-${i}-question-${t}-option${a}`), c.dataset.index = a, null != o) {
            o.answers.includes(d.uuid) && (c.checked = !0, e.recovered = !0)
        }
        let u = document.createElement("label");
        u.setAttribute("for", `questions-${i}-question-${t}-option${a}`);
        let l = document.createElement("div");
        l.classList.add("alternative-text"), l.innerHTML = d.text;
        let p = document.createElement("span");
        p.classList.add("questions-checkbox-container");
        let b = document.createElement("span");
        b.classList.add("questions-checkbox-icon", "fas", "fa-circle"), u.appendChild(l), u.appendChild(p), p.appendChild(b), r.appendChild(c), r.appendChild(u), n.appendChild(r), d.correct && e.totalCorrectsAnswers++
    })
}

function feedbackBuilder(e, t, n, i, o) {
    i.titleFeedback || (i.titleFeedback = "Comentário");
    let s = document.createElement("div");
    s.classList.add("box-feedback-question"), s.setAttribute("id", `box-feedback-questions-${n}-question-${e}`);
    let d = document.createElement("div");
    d.classList.add("feedback-default-title"), d.setAttribute("id", `title-feedback-questions-${n}-question-${e}`), d.appendChild(document.createTextNode(i.titleFeedback));
    let a = document.createElement("div");
    a.classList.add("feedback-text"), a.setAttribute("id", `text-feedback-questions-${n}-question-${e}`), s.appendChild(d), s.appendChild(a), t.appendChild(s)
}

function showFeedback(e, t, n, i, o, s, d, a) {
    n.text = n.text.replace(/(\{\{correta\}\})/gim, s), n.title && (n.title = n.title.replace(/(\{\{correta\}\})/gim, s), e.querySelector(`#title-feedback-questions-${o}-question-${t}`).innerHTML = n.title), e.querySelector(`#text-feedback-questions-${o}-question-${t}`).innerHTML = n.text;
    let r = e.querySelector(`#box-feedback-questions-${o}-question-${t}`);
    r.classList.add("show"), r.classList.add(i), $((function () {
        $('[data-toggle="tooltip"]').tooltip()
    })), configHiddenElements(r.getAttribute("id"), d.feedback, a)
}

function correctAnswersAction(e, t, n, i) {
    questions[e].unlockCondition && (isNaN(questions[e].unlockCondition) ? n.questionId && (questions[e].unlockCondition.filter(t => {
        n.questionId === t && questions[e].hitQuestions.push(n.questionId)
    }), questions[e].unlockCondition.length === questions[e].hitQuestions.length && i.unlockModule(t, n.recovered)) : (questions[e].hitQuestions++, questions[e].unlockCondition === questions[e].hitQuestions && i.unlockModule(t, n.recovered)))
}

function tryAgainButtonAction(e, t, n, i, o) {
    t.querySelectorAll("input").forEach(e => {
        e.removeAttribute("disabled"), e.checked = !1, e.classList.remove("correct", "incorrect")
    }), n.classList.remove("hidden"), i.target.classList.add("hidden"), document.querySelector(`#box-feedback-questions-${o}-question-${e}`).classList.remove("show")
}

function getLetter(e) {
    let t = window.getComputedStyle(e.parentElement.querySelector(".questions-checkbox-container"), "::before").getPropertyValue("content");
    return t && "NONE" != t.toUpperCase() || (t = window.getComputedStyle(e.parentElement.querySelector("p"), "::before").getPropertyValue("content")), t.replace(")", "").toUpperCase()
}

function answerButtonActionQuestion(e, t, n, i, o, s, d, a, r) {
    if (!n.answers) return e.target.classList.add("hidden"), void 0 !== d && (n.positiveFeedback.text = n.positiveFeedback.text.replace(/(\{\{defaultText\}\})/gim, d.positiveFeedback)), showFeedback(t, o, n.positiveFeedback, "positiveFeedback", i), 1;
    if (t.querySelector("input:checked")) {
        t.querySelectorAll("input").forEach(e => {
            e.setAttribute("disabled", !0)
        });
        let c = s(n, t, i, o),
            u = c[1],
            l = c[0],
            p = c[2];
        return e.target.classList.add("hidden"), n.totalCorrectsAnswers === u && p.length === u ? (void 0 !== d && (n.positiveFeedback.text = n.positiveFeedback.text.replace(/(\{\{defaultText\}\})/gim, d.positiveFeedback)), showFeedback(t, o, n.positiveFeedback, "positiveFeedback", i, l, a, r), 1) : (void 0 !== d && (n.negativeFeedback.text = n.negativeFeedback.text.replace(/(\{\{defaultText\}\})/gim, d.negativeFeedback)), n.negativeFeedback.link && (n.negativeFeedback.text = n.negativeFeedback.text.replace(/(\{\{link\}\})/gim, n.negativeFeedback.link)), showFeedback(t, o, n.negativeFeedback, "negativeFeedback", i, l, a, r), 0)
    }
    n.textAlertNoOption || (n.textAlertNoOption = "Atenção, pelo menos uma opção deve ser marcada!"), alert(n.textAlertNoOption), e.stopImmediatePropagation()
}

function configBtnDefaultBuilder(e, t, n, i, o, s, d, a) {
    e.addEventListener("click", e => {
        history.replaceState(null, null, " ");
        let s = answerButtonActionQuestion(e, t, n, i, o, getResponseDefault, defaultQuestionData, a, d);
        1 === s ? correctAnswersAction(i, d, n, a) : 0 === s && document.querySelector(`#try-again-button-questions-${i}-question-${o}`).classList.remove("hidden");
        let r = t.querySelector(`#box-feedback-questions-${i}-question-${o}`);
        window.scrollTo(0, r.offset().top - (getMenuSize() + 30))
    }), n.buttonFeedbackTryAgain || (n.buttonFeedbackTryAgain = "Tentar novamente");
    let r = document.createElement("button");
    r.classList.add("btn", "text-white", "mdc-bg-green-900", "try-again", "hidden"), r.setAttribute("id", `try-again-button-questions-${i}-question-${o}`), r.setAttribute("type", "button"), r.appendChild(document.createTextNode(n.buttonFeedbackTryAgain)), r.addEventListener("click", s => {
        n.recovered = void 0, tryAgainButtonAction(o, t, e, s, i)
    }), s.appendChild(r)
}

function configBtnExerciseBuilder(e, t, n, i, o, s, d, a) {
    if (e.addEventListener("click", e => {
            history.replaceState(null, null, " "), 0 !== answerButtonActionQuestion(e, t, n, i, o, getResponsePracticeTest, defaultExerciseData, a, d) || null != exercises[i].btnTryAgain && !n.btnTryAgain || document.querySelector(`#try-again-button-questions-${i}-question-${o}`).classList.remove("hidden");
            let s = document.querySelector(`#box-feedback-questions-${i}-question-${o}`);
            window.scrollTo(0, s.offset().top - (getMenuSize() + 30))
        }), null == exercises[i].btnTryAgain || n.btnTryAgain) {
        let n = document.createElement("button");
        n.classList.add("btn", "text-white", "mdc-bg-green-900", "try-again", "hidden"), n.setAttribute("id", `try-again-button-questions-${i}-question-${o}`), n.setAttribute("type", "button"), n.appendChild(document.createTextNode("Tentar novamente")), n.addEventListener("click", n => {
            tryAgainButtonAction(o, t, e, n, i)
        }), s.appendChild(n)
    }
}

function getResponseDefault(e, t) {
    let n = [],
        i = 0,
        o = [],
        s = t.querySelectorAll("input:checked");
    return s.forEach(t => {
        "undefined" != typeof storage && e.answers[t.dataset.index].uuid && n.push(e.answers[t.dataset.index].uuid), e.answers[t.dataset.index].correct ? (t.classList.add("correct"), i++, o.push(getLetter(t))) : t.classList.add("incorrect")
    }), "undefined" != typeof storage && e.uuid && void 0 === e.recovered && storage.sendAnswers(e.uuid, n), [o, i, s]
}

function configBtnPracticeTestBuilder(e, t, n, i, o, s, d, a) {
    s.classList.add("hidden"), e.addEventListener("click", e => {
        let s = answerButtonActionQuestion(e, t, n, i, o, getResponsePracticeTest, defaultPracticeTestData, a, d);
        1 !== s && 0 !== s || (contQuestions--, 0 === contQuestions && setTimeout((function () {
            removeLoadingElement()
        }), 3e3))
    })
}

function getResponsePracticeTest(e, t, n, i) {
    let o = 0,
        s = t.querySelectorAll("input:checked");
    s.forEach(t => {
        e.answers[t.dataset.index].correct ? o++ : t.classList.add("incorrect")
    });
    let d = [];
    return e.answers.forEach((e, o) => {
        if (e.correct) {
            let e = t.querySelector(`#questions-${n}-question-${i}-option${o}`);
            e.classList.add("correct"), d.push(getLetter(e))
        }
    }), [d, o, s]
}

function practiceTestButtonBuilder(e, t) {
    let n = questions[t],
        i = document.createElement("div");
    i.classList.add("container-buttons-practice-test");
    let o = document.createElement("button");
    o.classList.add("btn", "text-dark", "mdc-bg-yellow-700", "question-feedback-btn"), o.setAttribute("id", "feedback-button-practice-test-" + e.getAttribute("id")), o.setAttribute("type", "button"), o.appendChild(document.createTextNode(n.textButton ? n.textButton : "Finalizar")), o.addEventListener("click", i => {
        finishPracticeTest(e, i, n, t)
    }), i.appendChild(o), e.appendChild(i)
}

function finishPracticeTest(e, t, n, i) {
    let o = [];
    for (div of e.querySelectorAll(".question-main-container"))
        if (div.querySelector("input:checked")) o.push(div);
        else {
            if (div.querySelector("input")) return alert("Atenção, todas as perguntas devem ser respondidas!"), void t.stopImmediatePropagation();
            o.push(div)
        } if (!1 !== n.finishingLoader && createLoadingElement("Aguarde enquanto preparamos tudo por aqui.", "Isso pode levar alguns instantes."), contQuestions = o.length, o.forEach(e => {
            e.querySelector(".question-feedback-btn").click()
        }), window.scroll(0, e.querySelector(`#questions-${i}-question-0-main-container`).offset().top - getMenuSize()), n.hiddeBtnByEnd) e.querySelector("#feedback-button-practice-test-" + e.getAttribute("id")).classList.add("hidden");
    else {
        let t = document.createElement("button");
        t.classList.add("btn", "text-dark", "mdc-bg-yellow-700", "question-feedback-btn"), t.setAttribute("type", "button"), t.appendChild(document.createTextNode("Voltar para o topo")), t.addEventListener("click", t => {
            window.scroll(0, e.querySelector(`#questions-${i}-question-0-main-container`).offset().top)
        }), e.querySelector(".container-buttons-practice-test").replaceChild(t, e.querySelector("#feedback-button-practice-test-" + e.getAttribute("id")))
    }
}